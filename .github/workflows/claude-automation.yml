name: Debug Claude Workflow

on:
  workflow_dispatch:
    inputs:
      debug_level:
        description: 'Debug level'
        required: true
        default: 'basic'
        type: choice
        options:
        - 'basic'
        - 'detailed'
        - 'full'

jobs:
  debug:
    runs-on: ubuntu-latest
    
    steps:
    - name: Environment Check
      run: |
        echo "üîç ENVIRONMENT DEBUG"
        echo "==================="
        echo "Runner OS: ${{ runner.os }}"
        echo "GitHub Actor: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Event: ${{ github.event_name }}"
        echo ""

    - name: Secrets Check
      run: |
        echo "üîê SECRETS CHECK"
        echo "================"
        if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
          echo "‚ùå ANTHROPIC_API_KEY is NOT set"
          echo "::error::ANTHROPIC_API_KEY secret is missing"
        else
          echo "‚úÖ ANTHROPIC_API_KEY is set"
          echo "Key length: ${#ANTHROPIC_API_KEY}" 
        fi
        
        if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
          echo "‚ùå GITHUB_TOKEN is NOT set"
        else
          echo "‚úÖ GITHUB_TOKEN is set"
        fi
        echo ""
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Checkout Test
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: File System Check
      run: |
        echo "üìÅ FILE SYSTEM CHECK"
        echo "==================="
        echo "Current directory: $(pwd)"
        echo "Files in root:"
        ls -la
        echo ""
        
        echo "Python files:"
        find . -name "*.py" -type f | head -10
        echo ""
        
        echo "Key files check:"
        for file in "main.py" "requirements.txt" "static/index.html" "README.md"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists ($(wc -l < "$file") lines)"
          else
            echo "‚ùå $file missing"
          fi
        done
        echo ""

    - name: Python Setup Test
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Python Environment Check
      run: |
        echo "üêç PYTHON ENVIRONMENT"
        echo "===================="
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo "Python path: $(which python)"
        echo ""

    - name: Dependencies Install Test
      run: |
        echo "üì¶ DEPENDENCIES TEST"
        echo "==================="
        
        echo "Installing basic dependencies..."
        pip install requests
        echo "‚úÖ requests installed"
        
        echo "Testing Anthropic install..."
        if pip install anthropic; then
          echo "‚úÖ anthropic installed successfully"
        else
          echo "‚ùå anthropic installation failed"
          exit 1
        fi
        
        echo "Checking installed packages:"
        pip list | grep -E "(anthropic|requests)"
        echo ""

    - name: API Connection Test
      if: github.event.inputs.debug_level != 'basic'
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "üîå API CONNECTION TEST"
        echo "====================="
        
        python3 << 'EOF'
        import os
        import sys
        
        try:
            # Test API key format
            api_key = os.environ.get('ANTHROPIC_API_KEY', '')
            if not api_key:
                print("‚ùå No API key found")
                sys.exit(1)
            
            if not api_key.startswith('sk-ant-'):
                print(f"‚ö†Ô∏è  API key format looks unusual: {api_key[:10]}...")
            else:
                print(f"‚úÖ API key format looks correct: {api_key[:10]}...")
            
            # Test Anthropic import
            try:
                from anthropic import Anthropic
                print("‚úÖ Anthropic library imported successfully")
                
                # Test client creation (but don't make API call yet)
                client = Anthropic(api_key=api_key)
                print("‚úÖ Anthropic client created successfully")
                
            except ImportError as e:
                print(f"‚ùå Failed to import Anthropic: {e}")
                sys.exit(1)
            except Exception as e:
                print(f"‚ùå Failed to create Anthropic client: {e}")
                sys.exit(1)
                
        except Exception as e:
            print(f"‚ùå Unexpected error: {e}")
            sys.exit(1)
        EOF

    - name: Full API Test
      if: github.event.inputs.debug_level == 'full'
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "üöÄ FULL API TEST"
        echo "==============="
        
        python3 << 'EOF'
        import os
        import sys
        from anthropic import Anthropic
        
        try:
            client = Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
            
            print("Making test API call...")
            response = client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=50,
                messages=[{
                    "role": "user", 
                    "content": "Say 'API test successful' and nothing else."
                }]
            )
            
            if response and response.content:
                result = response.content[0].text.strip()
                print(f"‚úÖ API Response: {result}")
                if "API test successful" in result:
                    print("‚úÖ Full API test PASSED")
                else:
                    print("‚ö†Ô∏è  API responded but with unexpected content")
            else:
                print("‚ùå No response content received")
                
        except Exception as e:
            print(f"‚ùå API test failed: {e}")
            print(f"Error type: {type(e).__name__}")
            sys.exit(1)
        EOF

    - name: File Operations Test
      if: github.event.inputs.debug_level != 'basic'
      run: |
        echo "üìù FILE OPERATIONS TEST"
        echo "======================"
        
        # Test file reading
        echo "Testing file reading..."
        if [ -f "main.py" ]; then
          lines=$(wc -l < main.py)
          chars=$(wc -c < main.py)
          echo "‚úÖ main.py: $lines lines, $chars characters"
          
          # Test if we can read it without issues
          if head -20 main.py > /dev/null; then
            echo "‚úÖ File reading successful"
          else
            echo "‚ùå File reading failed"
          fi
        fi
        
        # Test file writing
        echo "Testing file writing..."
        if echo "test content" > test_write.txt; then
          echo "‚úÖ File writing successful"
          rm -f test_write.txt
        else
          echo "‚ùå File writing failed"
        fi

    - name: Git Operations Test
      if: github.event.inputs.debug_level == 'full'
      run: |
        echo "üìö GIT OPERATIONS TEST"
        echo "====================="
        
        echo "Git status:"
        git status
        echo ""
        
        echo "Git config test:"
        git config --local user.email "test@github.com"
        git config --local user.name "Debug Test"
        echo "‚úÖ Git config successful"
        
        echo "Branch operations test:"
        current_branch=$(git branch --show-current)
        echo "Current branch: $current_branch"
        
        # Test branch creation (but don't push)
        test_branch="debug-test-$$"
        if git checkout -b "$test_branch"; then
          echo "‚úÖ Branch creation successful"
          git checkout "$current_branch"
          git branch -D "$test_branch"
          echo "‚úÖ Branch cleanup successful"
        else
          echo "‚ùå Branch creation failed"
        fi

    - name: Summary Report
      if: always()
      run: |
        echo ""
        echo "üéØ DEBUG SUMMARY"
        echo "==============="
        echo "Debug completed at $(date)"
        echo ""
        echo "Check the logs above for:"
        echo "- ‚ùå Any failed checks"
        echo "- ‚ö†Ô∏è  Any warnings"
        echo "- ‚úÖ Successful operations"
        echo ""
        echo "If all checks passed, the issue might be in:"
        echo "1. Workflow logic/syntax"
        echo "2. GitHub Actions permissions" 
        echo "3. Repository settings"
        echo "4. Complex environment variable handling"
