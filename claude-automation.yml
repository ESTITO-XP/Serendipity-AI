name: Claude Automation

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      task:
        description: 'Task for Claude to perform'
        required: true
        default: 'Enhance the codebase'

jobs:
  claude-task:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.body, 'claude') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Log Execution Context
      run: |
        echo "Current Date and Time (UTC): $(date -u '+%Y-%m-%d %H:%M:%S')"
        echo "Current User's Login: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo "Done!"
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install anthropic==0.34.0
        pip install requests
    
    - name: Debug Environment
      run: |
        echo "Checking environment variables..."
        if [ -z "$ANTHROPIC_API_KEY" ]; then
          echo "‚ùå ANTHROPIC_API_KEY is not set!"
        else
          echo "‚úÖ ANTHROPIC_API_KEY is set"
        fi
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "‚ùå GITHUB_TOKEN is not set!"  
        else
          echo "‚úÖ GITHUB_TOKEN is set"
        fi
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run Claude Enhancement
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python3 << 'EOF'
        import os
        import sys
        import requests
        from datetime import datetime

        def main():
            try:
                print(f'üöÄ Starting Claude automation at {datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")} UTC')
                print(f'üë§ Running as user: {os.environ.get("GITHUB_ACTOR", "unknown")}\n')

                # Check API key
                api_key = os.environ.get('ANTHROPIC_API_KEY')
                if not api_key:
                    print('‚ùå ERROR: ANTHROPIC_API_KEY environment variable is not set')
                    print('Please add your Anthropic API key to repository secrets')
                    return False

                if not api_key.startswith('sk-'):
                    print('‚ùå ERROR: Invalid API key format')
                    return False

                print('‚úÖ API key validation passed')

                # Import and test Anthropic
                try:
                    from anthropic import Anthropic
                    client = Anthropic(api_key=api_key)
                    print('‚úÖ Anthropic client initialized')
                except ImportError as e:
                    print(f'‚ùå ERROR importing anthropic: {e}')
                    return False
                except Exception as e:
                    print(f'‚ùå ERROR creating client: {e}')
                    return False

                # Get task from workflow input or use default
                task = os.environ.get('INPUT_TASK', 'Enhance the Serendipity AI project with better error handling and modern frontend')

                print(f'üìã Task: {task[:100]}...')

                # Make API call with updated model
                try:
                    print('ü§ñ Calling Claude API...')
                    response = client.messages.create(
                        model='claude-3-5-sonnet-20241022',  # Updated model
                        max_tokens=4000,
                        messages=[{
                            'role': 'user', 
                            'content': f'Please provide enhanced code suggestions for: {task}'
                        }]
                    )
                    print('‚úÖ Claude API call successful!')
                except Exception as e:
                    print(f'‚ùå ERROR calling Claude API: {e}')
                    # Try fallback model
                    try:
                        print('üîÑ Trying fallback model...')
                        response = client.messages.create(
                            model='claude-3-sonnet-20240229',
                            max_tokens=4000,
                            messages=[{
                                'role': 'user', 
                                'content': f'Please provide enhanced code suggestions for: {task}'
                            }]
                        )
                        print('‚úÖ Fallback API call successful!')
                    except Exception as e2:
                        print(f'‚ùå ERROR with fallback model: {e2}')
                        return False

                # Verify response
                if not response or not response.content:
                    print('‚ùå ERROR: No response content received from Claude')
                    return False

                response_text = response.content[0].text
                print(f'‚úÖ Received response ({len(response_text)} characters)')
                print(f'üìÑ Preview: {response_text[:200]}...\n')
                
                print(f'‚úÖ Task completed at {datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")} UTC')
                return True

            except Exception as e:
                print(f'‚ùå Unexpected error: {str(e)}')
                import traceback
                traceback.print_exc()
                return False

        # Run main function
        success = main()
        if not success:
            print('\nüí• Automation failed!')
            sys.exit(1)
        else:
            print('\nüéâ Automation completed successfully!')
            sys.exit(0)
        EOF
    
    - name: Comment on Issue
      if: github.event_name == 'issues'
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().replace('T', ' ').substr(0, 19);
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ü§ñ Claude automation has completed processing your request at ${date} UTC!\n\n‚úÖ Check the [Actions tab](${context.payload.repository.html_url}/actions) for detailed results.`
          })
